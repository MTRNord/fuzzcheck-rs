# Status

## Misc

* create default generators for most basic types

* limit maximum size of corpus
    * automatically throw out an input every time another one is added

* separate fuzzcheckâ€™s traits such as Mutator from the main crate
    -> that means people can implement a mutator without depending on fuzzcheck
    -> but they do need to depend on fuzzcheck_mutators_trait, which must not be instrumented
        -> which does not fit within current compilation model
            -> need to have third type of dependencies, that are non-instrumented and
            usable by both the instrumented code and the non-instrumented fuzz targets
        -> mostly, people should not implement mutators in crates that are instrumented!

* I should really use a custom target directory

* document the reexport-instrumented-libraries pattern
    * add a note about how serde is used by default but really if the test library
already imports a different version of it, then we should use that version

* add an option to compile the main library with certain features?

* verify that using trace_cmp doesn't ruin performance
    * what if I also used a static array to collect cmp features?
        * slows down the tested library less
        * probably much more expensive to iterate over
    * right now I have them disabled but that is a shame since all the effort in
    designing feature groups was to better support cmp features

* iteration over collected features can probably be improved upon even more

* support for crossover operation, done right (i.e. strongly typed)
    * so every once in a while the pool shares its highest scoring inputs
    with the mutator and then the mutator does a frequency analysis (or something else)
    of the subparts of all the inputs in order to build a dictionary of interesting
    subvalues that can be used for the next mutations

* make the world print its output corpus only at the end of the fuzz test,
and maybe automatically apply a corpus minification to it

* support other kinds of features such as time/resources taken, size of stack, etc.